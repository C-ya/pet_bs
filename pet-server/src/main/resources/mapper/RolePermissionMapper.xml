<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smilcool.server.core.dao.RolePermissionMapper">
    <resultMap id="BaseResultMap" type="com.smilcool.server.core.pojo.po.RolePermission">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="role_id" jdbcType="INTEGER" property="roleId"/>
        <result column="permission_id" jdbcType="INTEGER" property="permissionId"/>
        <result column="state" jdbcType="INTEGER" property="state"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="deleted" jdbcType="BIT" property="deleted"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, role_id, permission_id, state, create_time, update_time, deleted
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from role_permission
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE
        FROM role_permission
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.smilcool.server.core.pojo.po.RolePermission">
        INSERT INTO role_permission (id, role_id, permission_id,
                                     state, create_time, update_time,
                                     deleted)
        VALUES (#{id,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{permissionId,jdbcType=INTEGER},
                #{state,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
                #{deleted,jdbcType=BIT})
    </insert>
    <insert id="insertSelective" parameterType="com.smilcool.server.core.pojo.po.RolePermission"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into role_permission
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="permissionId != null">
                permission_id,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="permissionId != null">
                #{permissionId,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                #{deleted,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.smilcool.server.core.pojo.po.RolePermission">
        update role_permission
        <set>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="permissionId != null">
                permission_id = #{permissionId,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                deleted = #{deleted,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.smilcool.server.core.pojo.po.RolePermission">
        UPDATE role_permission
        SET role_id       = #{roleId,jdbcType=INTEGER},
            permission_id = #{permissionId,jdbcType=INTEGER},
            state         = #{state,jdbcType=INTEGER},
            create_time   = #{createTime,jdbcType=TIMESTAMP},
            update_time   = #{updateTime,jdbcType=TIMESTAMP},
            deleted       = #{deleted,jdbcType=BIT}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectByRoleIdAndPermissionId" resultType="com.smilcool.server.core.pojo.po.RolePermission">
        select
        <include refid="Base_Column_List"/>
        from role_permission
        where role_id = #{roleId}
        and permission_id = #{permissionId}
    </select>

    <select id="select" resultType="com.smilcool.server.core.pojo.po.RolePermission">
        select
        <include refid="Base_Column_List"/>
        from role_permission
    </select>

    <sql id="Permission_Base_Column_List">
        p.id, p.parent_id, p.name, p.description, p.url,
        p.type, p.seq, p.state, p.remark, p.create_time,
        p.update_time, p.deleted
    </sql>
    <select id="selectPermissionListByRoleId" resultType="com.smilcool.server.core.pojo.po.Permission">
        SELECT
        <include refid="Permission_Base_Column_List"/>
        from role_permission rp
        LEFT JOIN permission p ON rp.permission_id = p.id
        WHERE rp.role_id = #{roleId}
    </select>

    <select id="selectPermissionListByRoleIdList" resultType="com.smilcool.server.core.pojo.po.Permission">
        SELECT DISTINCT
        <include refid="Permission_Base_Column_List"/>
        FROM role_permission rp
        LEFT JOIN permission p ON rp.permission_id = p.id
        WHERE rp.role_id IN
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>


    <select id="selectPermissionNameByUserId" resultType="java.lang.String">
        SELECT DISTINCT p.name
        FROM role_permission rp
                 LEFT JOIN permission p ON rp.permission_id = p.id
        WHERE rp.role_id IN (
            SELECT r.id
            FROM user_role ur
                     LEFT JOIN role r ON ur.role_id = r.id
            WHERE ur.user_id = #{id}
        )
    </select>


    <select id="selectPermissionNameByUsername" resultType="java.lang.String">
        SELECT DISTINCT p.name
        FROM role_permission rp
                 LEFT JOIN permission p ON rp.permission_id = p.id
        WHERE rp.role_id IN (
            SELECT r.id
            FROM user_role ur
                     LEFT JOIN user u ON ur.user_id = u.id
                     LEFT JOIN role r ON ur.role_id = r.id
            WHERE u.username = #{username}
        )
    </select>
</mapper>