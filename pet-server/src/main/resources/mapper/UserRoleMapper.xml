<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smilcool.server.core.dao.UserRoleMapper">
    <resultMap id="BaseResultMap" type="com.smilcool.server.core.pojo.po.UserRole">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="role_id" jdbcType="INTEGER" property="roleId"/>
        <result column="state" jdbcType="INTEGER" property="state"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="deleted" jdbcType="BIT" property="deleted"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, user_id, role_id, state, create_time, update_time, deleted
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_role
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE
        FROM user_role
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.smilcool.server.core.pojo.po.UserRole">
        INSERT INTO user_role (id, user_id, role_id,
                               state, create_time, update_time,
                               deleted)
        VALUES (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER},
                #{state,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
                #{deleted,jdbcType=BIT})
    </insert>
    <insert id="insertSelective" parameterType="com.smilcool.server.core.pojo.po.UserRole"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into user_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                #{deleted,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.smilcool.server.core.pojo.po.UserRole">
        update user_role
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                deleted = #{deleted,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.smilcool.server.core.pojo.po.UserRole">
        UPDATE user_role
        SET user_id     = #{userId,jdbcType=INTEGER},
            role_id     = #{roleId,jdbcType=INTEGER},
            state       = #{state,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            deleted     = #{deleted,jdbcType=BIT}
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <select id="select" resultType="com.smilcool.server.core.pojo.po.UserRole">
        select
        <include refid="Base_Column_List"/>
        from user_role
    </select>

    <select id="selectByUserIdAndRoleId" resultType="com.smilcool.server.core.pojo.po.UserRole">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_role
        WHERE user_id = #{userId}
        AND role_id = #{roleId}
    </select>

    <sql id="Role_Base_Column_List">
        r.id, r.name, r.description, r.state, r.remark, r.create_time, r.update_time, r.deleted
    </sql>
    <select id="selectRoleByUserId" resultType="com.smilcool.server.core.pojo.po.Role">
        SELECT
        <include refid="Role_Base_Column_List"/>
        FROM user_role ur LEFT JOIN role r
        ON ur.role_id = r.id
        WHERE ur.user_id = #{userId}
    </select>

    <select id="selectRoleNameByUsername" resultType="java.lang.String">
        SELECT r.name
        FROM user_role ur
                 LEFT JOIN user u ON ur.user_id = u.id
                 LEFT JOIN role r ON ur.role_id = r.id
        WHERE u.username = #{username}
    </select>

    <select id="selectRoleNameByUserId" resultType="java.lang.String">
        SELECT r.name
        FROM user_role ur
                 LEFT JOIN role r ON ur.role_id = r.id
        WHERE ur.user_id = #{userId}
    </select>


    <select id="selectRoleDescriptionByUserId" resultType="java.lang.String">
        SELECT r.description
        FROM user_role ur
                 LEFT JOIN role r ON ur.role_id = r.id
        WHERE ur.user_id = #{userId}
    </select>
</mapper>